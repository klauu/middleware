//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Bank;

import com.zeroc.Ice.Current;
import com.zeroc.Ice.Object;

import java.io.Serializable;

public class Client implements Cloneable,
                               Serializable, Object {
    public UserData data;

    public AccountType type;

    public double balance;

    public Client()
    {
        this.data = new UserData();
        this.type = AccountType.STANDARD;
    }

    public Client(UserData data, AccountType type, double balance)
    {
        this.data = data;
        this.type = type;
        this.balance = balance;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Client r = null;
        if(rhs instanceof Client)
        {
            r = (Client)rhs;
        }

        if(r != null)
        {
            if(this.data != r.data)
            {
                if(this.data == null || r.data == null || !this.data.equals(r.data))
                {
                    return false;
                }
            }
            if(this.type != r.type)
            {
                if(this.type == null || r.type == null || !this.type.equals(r.type))
                {
                    return false;
                }
            }
            if(this.balance != r.balance)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Bank::Client");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, data);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, type);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, balance);
        return h_;
    }

    public Client clone()
    {
        Client c = null;
        try
        {
            c = (Client)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        UserData.ice_write(ostr, this.data);
        AccountType.ice_write(ostr, this.type);
        ostr.writeDouble(this.balance);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.data = UserData.ice_read(istr);
        this.type = AccountType.ice_read(istr);
        this.balance = istr.readDouble();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Client v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Client ice_read(com.zeroc.Ice.InputStream istr)
    {
        Client v = new Client();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Client> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Client v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Client> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Client.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Client _nullMarshalValue = new Client();

    /** @hidden */
    public static final long serialVersionUID = -2075899907L;

    @Override
    public boolean ice_isA(String s, Current current) {
        return false;
    }
}
